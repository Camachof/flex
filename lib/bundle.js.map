{"version":3,"sources":["webpack:///webpack/bootstrap 8fbb96c24b9c7efcd398","webpack:///./lib/entry.js","webpack:///./lib/lSystem.js","webpack:///./lib/util.js","webpack:///./lib/defaults.js","webpack:///./lib/constants.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAmB;AACnB;;AAEA;AACA,EAAC;;AAED;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,kCAAiC;AACjC,EAAC;;;;;;;AC/DD;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAmB,qBAAqB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;;;;;;;ACnJA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;AClBA;AACA,aAAY;AACZ,aAAY,oCAAoC;AAChD;;;;;;;ACJA;AACA;AACA;AACA;;AAEA;AACA,YAAW;AACX,aAAY,wBAAwB,kDAAkD;AACtF,gBAAe;AACf,aAAY,4BAA4B,+CAA+C;AACvF,UAAS;AACT,aAAY,gBAAgB,kDAAkD;AAC9E,aAAY;AACZ,aAAY,oCAAoC;AAChD","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8fbb96c24b9c7efcd398\n **/","const lSystem = require('./lSystem.js');\nconst Constants = require('./constants.js');\n\nnew lSystem(Constants.hilbert);\n\nfunction dragstartHandler(e) {\n  const style = window.getComputedStyle(e.target, null);\n\n  const xPos = parseInt(style.getPropertyValue('left'), 10) - e.clientX;\n  const yPos = parseInt(style.getPropertyValue('top'), 10) - e.clientY;\n\n  e.dataTransfer.setData('text/plain', (xPos + ',' + yPos));\n}\n\nfunction dropHandler(e){\n  e.preventDefault();\n\n  const offset = e.dataTransfer.getData('text/plain').split(',');\n  const toolbar = document.getElementById('curveToolbar');\n\n  toolbar.style.left = e.clientX + parseInt(offset[0],10) + 'px';\n  toolbar.style.top = e.clientY + parseInt(offset[1],10) + 'px';\n\n  return false;\n}\n\nfunction dragoverHandler(e) {\n  e.preventDefault();\n}\n\nconst toolbar = document.getElementById('curveToolbar');\n\ntoolbar.addEventListener('dragstart', dragstartHandler);\ndocument.body.addEventListener('dragover', dragoverHandler);\ndocument.body.addEventListener('drop', dropHandler);\n\nconst form = document.getElementById('customForm');\nlet currentCurve;\n\nform.addEventListener(\"submit\", e => {\n  e.preventDefault();\n\n  let angle = $('#angle').val();\n  let iterations = $('#iterations').val();\n\n  let userCurve = { angle: angle, iterations: iterations };\n  let mergedInputs = Object.assign(currentCurve, userCurve);\n\n  new lSystem(mergedInputs);\n});\n\nconst buttons = document.getElementById('curveButtons');\n\nbuttons.addEventListener(\"click\", e => {\n  e.preventDefault();\n  const curve = Constants[e.target.id];\n\n  new lSystem(curve);\n\n  $('#angle').val(curve.angle);\n  $('#iterations').val(curve.iterations);\n\n  currentCurve = Object.assign({}, curve);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/entry.js\n ** module id = 0\n ** module chunks = 0\n **/","const Util = require('./util.js');\nconst Defaults = require('./defaults.js');\n\nconst canvas = document.getElementById('canvas');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nconst ctx = canvas.getContext(\"2d\");\n\n\nclass lSystem {\n  constructor(options){\n    const mergedInputs = Object.assign(Defaults.hilbert, options);\n\n    this.variables = mergedInputs.variables;\n    this.constants = mergedInputs.constants;\n    this.state = mergedInputs.axiom;\n    this.rules = mergedInputs.rules;\n    this.angleChange = Util.degreesToRadian(mergedInputs.angle);\n    this.iterations = mergedInputs.iterations;\n    this.iterationOffset = mergedInputs.iterationOffset;\n\n    this.currentAngle = 0;\n\n    this.x = canvas.width / 2;\n    this.y = canvas.height - (canvas.height / 3);\n\n    this.execute();\n  }\n\n  execute(){\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    Util.degreesToRadian(this.angle);\n    this.deriveResult();\n    this.findDimensions();\n    this.draw();\n  }\n\n  deriveResult(){\n    const parser = Util.alphabetParser(this.variables);\n\n    for (var i = 0; i < this.iterations; i++) {\n      this.setInstructions(parser);\n    }\n  }\n\n  setInstructions(parser){\n    this.state = this.state.replace(new RegExp(parser, 'gi'), match => {\n      return this.rules[match];\n    });\n  }\n\n  angles(){\n    if (this.iterations == 1){\n      this.x += Math.round((Math.cos(this.currentAngle) * canvas.width) / 5);\n\n      this.y += Math.round((Math.sin(this.currentAngle) * canvas.width) / 5);\n    } else {\n      this.x += Math.round((Math.cos(this.currentAngle) * canvas.width) / (Math.pow(this.iterations, this.iterationOffset)));\n\n      this.y += Math.round((Math.sin(this.currentAngle) * canvas.width) / (Math.pow(this.iterations, this.iterationOffset)));\n    }\n  }\n\n  findDimensions(){\n    const parser = Util.alphabetParser(this.constants);\n    const matched = this.state.match(new RegExp(parser + \"|\\\\+|-\", 'gi'));\n\n    let minX = 0;\n    let maxX = canvas.width;\n\n    let minY = 0;\n    let maxY = canvas.height - 100;\n\n    matched.forEach( constant => {\n      if (constant === \"+\") {\n        this.currentAngle -= this.angleChange;\n      } else if (constant === \"-\") {\n        this.currentAngle += this.angleChange;\n      } else {\n          this.angles();\n      }\n\n      if (this.x < minX){\n        minX = this.x;\n      } else if (this.x > maxX) {\n        maxX = this.x;\n      }\n\n      if (this.y < minY){\n        minY = this.y;\n      } else if (this.y > maxY) {\n        maxY = this.y;\n      }\n    });\n\n    if (maxX > canvas.width){\n      const diff = maxX - canvas.width;\n      this.x = canvas.width / 3;\n      this.x -= diff + 150;\n    }\n    else if (minX < 200) {\n      const diff = Math.abs(minX);\n      this.x = canvas.width / 3;\n      this.x += diff + 150;\n    }\n    else {\n      this.x = canvas.width / 3;\n    }\n\n    if (maxY > canvas.height - 100){\n      const diff = maxY - canvas.height;\n      this.y = canvas.height - (canvas.height / 3);\n      this.y -= diff + 150;\n    }\n    else if (minY < 0) {\n      const diff = Math.abs(minY);\n      this.y = canvas.height - (canvas.height / 3);\n      this.y += diff + 150;\n    }\n    else {\n      this.y = canvas.height - (canvas.height / 3);\n    }\n\n    this.currentAngle = 0;\n  }\n\n  draw(){\n    const parser = Util.alphabetParser(this.constants);\n    const matched = this.state.match(new RegExp(parser + \"|\\\\+|-\", 'gi'));\n\n    matched.forEach( constant => {\n      if (constant === \"+\") {\n        this.currentAngle -= this.angleChange;\n      } else if (constant === \"-\") {\n        this.currentAngle += this.angleChange;\n      } else {\n          ctx.beginPath();\n          ctx.moveTo(this.x, this.y);\n          this.angles();\n          ctx.lineTo(this.x, this.y);\n          ctx.strokeStyle = \"black\";\n          ctx.lineWidth = 2;\n          ctx.stroke();\n      }\n    });\n  }\n}\n\nmodule.exports = lSystem;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/lSystem.js\n ** module id = 1\n ** module chunks = 0\n **/","\nclass Util {\n\n  static alphabetParser(alphabet){\n    let parser = \"\";\n    const letters = Array.from(new Set(alphabet.match(/\\w/g)));\n\n    letters.forEach( char => {\n      parser += char + \"|\";\n    });\n\n    return parser.slice(0, parser.length - 1);\n  }\n\n  static degreesToRadian(angle){\n    return (angle * Math.PI) / 180;\n  }\n}\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util.js\n ** module id = 2\n ** module chunks = 0\n **/","\nmodule.exports = {\n  hilbert: {variables: \"AB\", constants: \"F+-\", axiom: \"A\",\n    rules: { A: \"-BF+AFA+FB-\", B: \"+AF−BFB−FA+\"}, angle: 90, iterations: 5}\n  };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/defaults.js\n ** module id = 3\n ** module chunks = 0\n **/","// hilbert: 3\n// Kock: 3.7\n// sierpinski: 3\n// dragon: 2.2\n\nmodule.exports = {\n  dragon: { variables: \"XY\", constants: \"F+-\", axiom: \"FX\",\n    rules: { X: \"X+YF+\", Y: \"-FX-Y\"}, angle: 90, iterations: 1 , iterationOffset: 2.2},\n  sierpinski: { variables: \"AB\", constants: \"AB+-\", axiom: \"A\",\n    rules: { A: \"+B-A-B+\", B: \"-A+B+A-\"}, angle: 60, iterations: 1, iterationOffset: 3},\n  koch: { variables: \"F\", constants: \"F+-\", axiom: \"F\",\n    rules: { F: \"F+F-F-F+F\"}, angle: 90, iterations: 1 , iterationOffset: 3.7},\n  hilbert: {variables: \"AB\", constants: \"F+-\", axiom: \"A\",\n    rules: { A: \"+BF-AFA-FB+\", B: \"-AF+BFB+FA-\"}, angle: 90, iterations: 1, iterationOffset: 3}\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/constants.js\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}