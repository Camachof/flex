{"version":3,"sources":["webpack:///webpack/bootstrap 98d9bc488b7e78e0a3ec","webpack:///./lib/entry.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;AACA,mCAAkC,yBAAyB","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 98d9bc488b7e78e0a3ec\n **/","//\n// L-system\n//\n// Alphabet : A, B\n// Constants : F + −\n// Axiom : A\n// Production rules:\n// A → − B F + A F A + F B −\n// B → + A F − B F B − F A +\n// Here, \"F\" means \"draw forward\",\n//       \"−\" means \"turn left 90°\",\n//       \"+\" means \"turn right 90°\" and\n//       \"A\" and \"B\" are ignored during drawing.\n\n// Axiom / intial state\n\n// const rules = {\n//   A: \"-BF+AFA+FB-\", // Rule 1\n//   B: \"+AF-BFB-FA+\"  // Rule 2\n// };\n\n// const rules = {\n//   F: \"F+F-F-F+F\"\n// };\n\nconst canvas = document.getElementById('canvas');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nconst ctx = canvas.getContext(\"2d\");\nconst min = Math.min(canvas.width, canvas.height);\n\nclass lSystem {\n  constructor(alphabet, axiom, rules, iterations, angle = 0){\n    this.alphabet = alphabet;\n    this.state = axiom;\n    this.rules = rules;\n    this.iterations = iterations;\n    this.x = canvas.width / 2;\n    this.y = canvas.height;\n    this.angle = angle;\n\n    this.produce();\n  }\n\n  produce(){\n    this.deriveResult();\n    this.draw();\n  }\n\n  alphabetParser(){\n    let parser = \"\";\n    const letters = Array.from(new Set(this.alphabet.match(/\\w/g)));\n\n    letters.forEach( char => {\n      parser += char + \"|\";\n    });\n\n    return parser.slice(0, parser.length - 1);\n  }\n\n  // constantParser(){\n  //   let parser = \"/\";\n  //\n  //   const constants = Array.from(new Set(this.constants.match(/\\w/g)));\n  //\n  //   constants.forEach( char => {\n  //     parser += char + \"/\";\n  //   });\n  //\n  //   return parser + \"gi\";\n  // }\n\n  deriveResult(){\n    let parser = this.alphabetParser();\n    for (var i = 0; i < this.iterations; i++) {\n      this.setInstructions(parser);\n    }\n  }\n\n  setInstructions(parser){\n    this.state = this.state.replace(new RegExp(parser, 'gi'), match => {\n      return this.rules[match];\n    });\n  }\n\n  angles(){\n    this.x += Math.round(Math.cos(this.angle));\n    this.y += Math.round(Math.sin(this.angle)) * -1;\n  }\n\n  draw(){\n    let matched = this.state.match(/a|b|\\+|-/gi);\n    matched.forEach( constant => {\n      if (constant.toLowerCase() === \"a\" || constant.toLowerCase() === \"b\") {\n        ctx.beginPath();\n        ctx.moveTo(this.x, this.y);\n        this.angles();\n        ctx.lineTo(this.x, this.y);\n        debugger;\n        ctx.stroke();\n      } else if (constant === \"+\") {\n        this.angle += Math.PI/3;\n      } else if (constant === \"-\") {\n        this.angle -= Math.PI/3;\n      }\n    });\n  }\n}\nlet trial = new lSystem(\"AB\",\"A\",{ A: \"B-A-B\", B: \"A+B+A\" }, 8);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/entry.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}